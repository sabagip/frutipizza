/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ladolcepizza;

import javax.swing.JOptionPane;
import BasedeDatos.Conexion;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.Timer;

/**
 *
 * @author SABAGIP
 */
public class Creacion extends javax.swing.JFrame {

    int sumaCombinacion = 0;
    int ingredentes = 0;
    int base = 0;
    int totalidaDePizzas = 0;
    int progreso = 180;
    public static int seg;
    String idCompra = "";
    float total = 0;
    float totalMultiplicado = 0;
    String nombreCliente = "";
    String apellidoPaternoCliente = "";
    String apellidoMaternoCliente = "";
    String tamaño = "";
    ResultSet consulta;
    String comandosSQL = "";
    String Base = "";
    String tiempo = "";
    boolean activada = false;
    boolean segundoIngrediente = true, tercerIngrediente = true; // true suma, false multiplica
    public static boolean bandera = false;
    PilaValorIngrediente arregloSumaCombinacion = new PilaValorIngrediente(); //Pila que mantedrá 
    pilaNombreIngredientes arregloNombreIngredientes = new pilaNombreIngredientes();
    Conexion conexion = new Conexion();
    JFrame ventana;
    Timer temp;

    /**
     * //Variables que contendrán los precios de los ingredientes
     *
     * final int PLATANO = 15, MANGO = 25, PIÑA = 17, KIWI = 10, FRESA = 25,
     * MANZANA = 16, DURAZNO = 9, HARINA = 45, GALLETA = 55;
     */
    float PLATANO = 0, MANGO = 0, PIÑA = 0, KIWI = 0, FRESA = 0,
            MANZANA = 0, DURAZNO = 0, HARINA = 0, GALLETA = 0;

    /*
     //Varibales que contendrán el valor para realizar las operaciones y cargar las
     //imagenes
     */
    final int VALOR_PLATANO = 10, VALOR_MANGO = 21, VALOR_PIÑA = 33, VALOR_KIWI = 45,
            VALOR_FRESA = 57, VALOR_MANZANA = 69, VALOR_DURAZNO = 71,
            VALOR_HARINA = 3, VALOR_GALLETA = 7;

    /**
     * Creates new form Creacion
     */
    public Creacion() {
        initComponents();

        EscalarImagen durazno = new EscalarImagen("/Imagenes/durazno.jpg", lblDurazno);
        EscalarImagen fresa = new EscalarImagen("/Imagenes/fresa.jpg", lblFresa);
        EscalarImagen kiwi = new EscalarImagen("/Imagenes/kiwi.jpg", lblKiwi);
        EscalarImagen mango = new EscalarImagen("/Imagenes/mango.jpg", lblMango);
        EscalarImagen manzana = new EscalarImagen("/Imagenes/manzana.jpg", lblManzana);
        EscalarImagen piña = new EscalarImagen("/Imagenes/piña.jpg", lblPiña);
        EscalarImagen platano = new EscalarImagen("/Imagenes/platano.jpg", lblPlatano);
        EscalarImagen harina = new EscalarImagen("/Imagenes/harina.jpg", lblHarina);
        EscalarImagen galleta = new EscalarImagen("/Imagenes/galleta.jpg", lblGalleta);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        grupoTamañosPizzas = new javax.swing.ButtonGroup();
        txtTiempo = new javax.swing.JTextField();
        txtApellidoM = new javax.swing.JTextField();
        txtIdCompra = new javax.swing.JTextField();
        txtNombreCliente = new javax.swing.JTextField();
        txtApellidoP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblMango = new javax.swing.JLabel();
        lblPlatano = new javax.swing.JLabel();
        lblPiña = new javax.swing.JLabel();
        lblKiwi = new javax.swing.JLabel();
        lblFresa = new javax.swing.JLabel();
        lblManzana = new javax.swing.JLabel();
        lblDurazno = new javax.swing.JLabel();
        lblHarina = new javax.swing.JLabel();
        lblGalleta = new javax.swing.JLabel();
        lblCreacion = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        rdBtnChica = new javax.swing.JRadioButton();
        rdBtnMediana = new javax.swing.JRadioButton();
        rdBtnGrande = new javax.swing.JRadioButton();
        rdBtnIndividual = new javax.swing.JRadioButton();
        lblTotal = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbCantidadPizzas = new javax.swing.JComboBox();
        btnOtraFrutiPizza = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lblNombreCliente = new javax.swing.JLabel();
        btnTerminarPedido = new javax.swing.JButton();
        lblTemporizador = new javax.swing.JLabel();
        pgrProgreso = new javax.swing.JProgressBar();

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FrutiPizza");
        setName(""); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Tamaño");

        jLabel2.setText("Base");

        jLabel3.setText("Delicious Cream");

        jLabel4.setText("Frutas");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setText("Total");

        lblMango.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mango.jpg"))); // NOI18N
        lblMango.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblMangoMouseClicked(evt);
            }
        });

        lblPlatano.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/platano.jpg"))); // NOI18N
        lblPlatano.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPlatanoMouseClicked(evt);
            }
        });

        lblPiña.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/piña.jpg"))); // NOI18N
        lblPiña.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPiñaMouseClicked(evt);
            }
        });

        lblKiwi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/kiwi.jpg"))); // NOI18N
        lblKiwi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblKiwiMouseClicked(evt);
            }
        });

        lblFresa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fresa.jpg"))); // NOI18N
        lblFresa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblFresaMouseClicked(evt);
            }
        });

        lblManzana.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/manzana.jpg"))); // NOI18N
        lblManzana.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblManzanaMouseClicked(evt);
            }
        });

        lblDurazno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/durazno.jpg"))); // NOI18N
        lblDurazno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDuraznoMouseClicked(evt);
            }
        });

        lblHarina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/harina.jpg"))); // NOI18N
        lblHarina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHarinaMouseClicked(evt);
            }
        });

        lblGalleta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/galleta.jpg"))); // NOI18N
        lblGalleta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblGalletaMouseClicked(evt);
            }
        });

        lblCreacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        grupoTamañosPizzas.add(rdBtnChica);
        rdBtnChica.setSelected(true);
        rdBtnChica.setText("Chica");

        grupoTamañosPizzas.add(rdBtnMediana);
        rdBtnMediana.setText("Mediana");

        grupoTamañosPizzas.add(rdBtnGrande);
        rdBtnGrande.setText("Grande");

        grupoTamañosPizzas.add(rdBtnIndividual);
        rdBtnIndividual.setText("Individual");

        lblTotal.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotal.setText("0");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel8.setText("$");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Número de pizzas");

        cmbCantidadPizzas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        cmbCantidadPizzas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cmbCantidadPizzas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCantidadPizzasItemStateChanged(evt);
            }
        });

        btnOtraFrutiPizza.setText("¿Otra frutipizza?");
        btnOtraFrutiPizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtraFrutiPizzaActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Vijaya", 0, 36)); // NOI18N
        jLabel9.setText("Es hora de crear tu pizza");

        lblNombreCliente.setFont(new java.awt.Font("Vijaya", 1, 36)); // NOI18N

        btnTerminarPedido.setText("Terminar Pedido");
        btnTerminarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerminarPedidoActionPerformed(evt);
            }
        });

        lblTemporizador.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblTemporizador.setText("3:00");

        pgrProgreso.setBackground(new java.awt.Color(51, 153, 255));
        pgrProgreso.setForeground(new java.awt.Color(255, 255, 0));
        pgrProgreso.setMaximum(180);
        pgrProgreso.setValue(180);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(cmbCantidadPizzas, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblHarina, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(43, 43, 43)
                                    .addComponent(lblGalleta, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rdBtnIndividual)
                                    .addComponent(rdBtnMediana))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rdBtnGrande)
                                    .addComponent(rdBtnChica)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4))
                                    .addComponent(lblDurazno, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(118, 118, 118))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(lblPlatano, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblMango, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(79, 79, 79))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblFresa, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lblManzana, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPiña, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lblKiwi, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(80, 80, 80)))))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(btnBorrar)
                        .addGap(18, 18, 18)
                        .addComponent(btnOtraFrutiPizza)
                        .addGap(27, 27, 27)
                        .addComponent(btnTerminarPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(lblNombreCliente)
                        .addGap(205, 205, 205)
                        .addComponent(lblTemporizador, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pgrProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(lblNombreCliente))
                    .addComponent(lblTemporizador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pgrProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdBtnChica)
                                    .addComponent(rdBtnIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdBtnMediana)
                                    .addComponent(rdBtnGrande))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHarina, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGalleta, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(75, 75, 75))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMango, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPlatano, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPiña, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblKiwi, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFresa, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblManzana, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDurazno, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCantidadPizzas, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrar)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(lblTotal)
                    .addComponent(btnOtraFrutiPizza)
                    .addComponent(btnTerminarPedido))
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblHarinaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHarinaMouseClicked
        /**
         * Se comprueba que la pila esté vacia y se regresan las banderas de los
         * ingredientes a su valor por default para poder realizar una nueva
         * combinacion
         */

        while (!arregloSumaCombinacion.esVacia()) {
            arregloSumaCombinacion.desapilar();
        }
        segundoIngrediente = true;
        tercerIngrediente = true;
        sumaCombinacion = 0;
        base = VALOR_HARINA;
        Base = "harina, ";

        consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"harina\"");
        try {
            if (consulta.next()) {
                GALLETA = consulta.getFloat(1);
                total = GALLETA;
            }

        } catch (SQLException e) {

            System.out.println(e);
        }

        //Se carga la imagen en la pantalla
        String path = "/Imagenes/combinaciones/" + base + ".png";
        EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
        //Se muestra el total 
        lblTotal.setText("" + total);
    }//GEN-LAST:event_lblHarinaMouseClicked

    private void lblGalletaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGalletaMouseClicked
        /**
         * Se comprueba que la pila esté vacia y se regresan las banderas de los
         * ingredientes a su valor por default para poder realizar una nueva
         * combinacion
         */
        while (!arregloSumaCombinacion.esVacia()) {
            arregloSumaCombinacion.desapilar();
        }

        segundoIngrediente = true;
        tercerIngrediente = true;
        sumaCombinacion = 0;
        base = VALOR_GALLETA;
        Base = "galleta, ";

        consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"galleta\"");
        try {
            if (consulta.next()) {
                GALLETA = consulta.getFloat(1);
                total = GALLETA;
            }

        } catch (SQLException e) {

            System.out.println(e);
        }

        String path = "/Imagenes/combinaciones/" + base + ".png";
        EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
        lblTotal.setText("" + total);
    }//GEN-LAST:event_lblGalletaMouseClicked

    private void lblPlatanoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPlatanoMouseClicked
        //Si se seleccionaron mas de 3 ingredientes
        if (arregloSumaCombinacion.esLlena() == true) {
            JOptionPane.showMessageDialog(rootPane, "Solo puedes seleccionar 3 ingredientes");
        }

        //Si la pila esta vacia y no se ha seleccionado ningun ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero la base de tu pizza");
        }
        /**
         * ****************************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************EL SIGUIENTE IF ES EL DE LOS TRES
         * INGREDIENTES************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * *************************************************************************************
         */
        //Si ya se seleccionaron dos ingredientes y se escoge el tercero
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && tercerIngrediente == false) {
            arregloSumaCombinacion.apilar(VALOR_PLATANO);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_PLATANO) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"platano\"");
            try {
                if (consulta.next()) {
                    PLATANO = consulta.getFloat(1);
                    total = total + PLATANO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("platano");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }

        }

        //Si ya se seleccionó un ingrediente y se seleccionó una base
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && segundoIngrediente == false && tercerIngrediente == true) {
            arregloSumaCombinacion.apilar(VALOR_PLATANO);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_PLATANO) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
            tercerIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"platano\"");
            try {
                if (consulta.next()) {
                    PLATANO = consulta.getFloat(1);
                    total = total + PLATANO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("platano");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }

        }
        //Si ya se acaba de seleccionar un ingrediente
        if (arregloSumaCombinacion.esVacia() && base != 0 && segundoIngrediente) {
            arregloSumaCombinacion.apilar(VALOR_PLATANO);
            sumaCombinacion = sumaCombinacion + base + VALOR_PLATANO;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
            segundoIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"platano\" ");
            try {
                if (consulta.next()) {
                    PLATANO = consulta.getFloat(1);
                    total = total + PLATANO;
                    lblTotal.setText("" + total);
                    System.out.println(total);

                    arregloNombreIngredientes.apilar("platano");
                }
            } catch (SQLException e) {

            }

        }


    }//GEN-LAST:event_lblPlatanoMouseClicked

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:

        borrarDatos();
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void lblMangoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMangoMouseClicked
        // TODO add your handling code here:

        if (arregloSumaCombinacion.esLlena() == true) {
            JOptionPane.showMessageDialog(rootPane, "Solo puedes seleccionar 3 ingredientes");
        }

        //Si la pila esta vacia y no se ha seleccionado ningun ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero la base de tu pizza");
        }

        /**
         * ****************************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************EL SIGUIENTE IF ES EL DE LOS TRES
         * INGREDIENTES************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * *************************************************************************************
         */
        //Si ya se seleccionaron dos ingredientes y se escoge el tercero
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && tercerIngrediente == false) {
            arregloSumaCombinacion.apilar(VALOR_MANGO);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_MANGO) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"mango\"");
            try {
                if (consulta.next()) {
                    MANGO = consulta.getFloat(1);
                    total = total + MANGO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("mango");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se seleccionó un ingrediente y se seleccionó una base
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && segundoIngrediente == false && tercerIngrediente == true) {
            arregloSumaCombinacion.apilar(VALOR_MANGO);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_MANGO) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"mango\"");
            try {
                if (consulta.next()) {
                    MANGO = consulta.getFloat(1);
                    total = total + MANGO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("mango");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se acaba de seleccionar un ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base != 0 && segundoIngrediente) {
            arregloSumaCombinacion.apilar(VALOR_MANGO);
            sumaCombinacion = sumaCombinacion + base + VALOR_MANGO;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            segundoIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"mango\"");
            try {
                if (consulta.next()) {
                    MANGO = consulta.getFloat(1);
                    total = total + MANGO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("mango");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }


    }//GEN-LAST:event_lblMangoMouseClicked

    private void lblPiñaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPiñaMouseClicked
        // TODO add your handling code here:

        if (arregloSumaCombinacion.esLlena() == true) {
            JOptionPane.showMessageDialog(rootPane, "Solo puedes seleccionar 3 ingredientes");
        }

        //Si la pila esta vacia y no se ha seleccionado ningun ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero la base de tu pizza");
        }

        /**
         * ****************************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************EL SIGUIENTE IF ES EL DE LOS TRES
         * INGREDIENTES************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * *************************************************************************************
         */
        //Si ya se seleccionaron dos ingredientes y se escoge el tercero
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && tercerIngrediente == false) {
            arregloSumaCombinacion.apilar(VALOR_PIÑA);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_PIÑA) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"pina\"");
            try {
                if (consulta.next()) {
                    PIÑA = consulta.getFloat(1);
                    total = total + PIÑA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("pina");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se seleccionó un ingrediente y se seleccionó una base
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && segundoIngrediente == false && tercerIngrediente == true) {
            arregloSumaCombinacion.apilar(VALOR_PIÑA);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_PIÑA) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"pina\"");
            try {
                if (consulta.next()) {
                    PIÑA = consulta.getFloat(1);
                    total = total + PIÑA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("pina");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se acaba de seleccionar un ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base != 0 && segundoIngrediente) {
            arregloSumaCombinacion.apilar(VALOR_PIÑA);
            sumaCombinacion = sumaCombinacion + base + VALOR_PIÑA;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
            segundoIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"pina\"");
            try {
                if (consulta.next()) {
                    PIÑA = consulta.getFloat(1);
                    total = total + PIÑA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("pina");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }


    }//GEN-LAST:event_lblPiñaMouseClicked

    private void lblKiwiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblKiwiMouseClicked
        // TODO add your handling code here:

        if (arregloSumaCombinacion.esLlena() == true) {
            JOptionPane.showMessageDialog(rootPane, "Solo puedes seleccionar 3 ingredientes");
        }

        //Si la pila esta vacia y no se ha seleccionado ningun ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero la base de tu pizza");
        }

        /**
         * ****************************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************EL SIGUIENTE IF ES EL DE LOS TRES
         * INGREDIENTES************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * *************************************************************************************
         */
        //Si ya se seleccionaron dos ingredientes y se escoge el tercero
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && tercerIngrediente == false) {
            arregloSumaCombinacion.apilar(VALOR_KIWI);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_KIWI) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"kiwi\"");
            try {
                if (consulta.next()) {
                    KIWI = consulta.getFloat(1);
                    total = total + KIWI;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("kiwi");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se seleccionó un ingrediente y se seleccionó una base
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && segundoIngrediente == false && tercerIngrediente == true) {
            arregloSumaCombinacion.apilar(VALOR_KIWI);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_KIWI) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"kiwi\"");
            try {
                if (consulta.next()) {
                    KIWI = consulta.getFloat(1);
                    total = total + KIWI;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("kiwi");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se acaba de seleccionar un ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base != 0 && segundoIngrediente) {
            arregloSumaCombinacion.apilar(VALOR_KIWI);
            sumaCombinacion = sumaCombinacion + base + VALOR_KIWI;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
            segundoIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"kiwi\"");
            try {
                if (consulta.next()) {
                    KIWI = consulta.getFloat(1);
                    total = total + KIWI;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("kiwi");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }


    }//GEN-LAST:event_lblKiwiMouseClicked

    private void lblFresaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFresaMouseClicked
        // TODO add your handling code here:

        if (arregloSumaCombinacion.esLlena() == true) {
            JOptionPane.showMessageDialog(rootPane, "Solo puedes seleccionar 3 ingredientes");
        }

        //Si la pila esta vacia y no se ha seleccionado ningun ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero la base de tu pizza");
        }

        /**
         * ****************************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************EL SIGUIENTE IF ES EL DE LOS TRES
         * INGREDIENTES************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * *************************************************************************************
         */
        //Si ya se seleccionaron dos ingredientes y se escoge el tercero
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && tercerIngrediente == false) {
            arregloSumaCombinacion.apilar(VALOR_FRESA);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_FRESA) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"fresa\"");
            try {
                if (consulta.next()) {
                    FRESA = consulta.getFloat(1);
                    total = total + FRESA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("fresa");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se seleccionó un ingrediente y se seleccionó una base
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && segundoIngrediente == false && tercerIngrediente == true) {
            arregloSumaCombinacion.apilar(VALOR_FRESA);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_FRESA) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"fresa\"");
            try {
                if (consulta.next()) {
                    FRESA = consulta.getFloat(1);
                    total = total + FRESA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("fresa");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se acaba de seleccionar un ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base != 0 && segundoIngrediente) {
            arregloSumaCombinacion.apilar(VALOR_FRESA);
            sumaCombinacion = sumaCombinacion + base + VALOR_FRESA;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
            segundoIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"fresa\"");
            try {
                if (consulta.next()) {
                    FRESA = consulta.getFloat(1);
                    total = total + FRESA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("fresa");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }
    }//GEN-LAST:event_lblFresaMouseClicked

    private void lblManzanaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblManzanaMouseClicked
        // TODO add your handling code here:

        if (arregloSumaCombinacion.esLlena() == true) {
            JOptionPane.showMessageDialog(rootPane, "Solo puedes seleccionar 3 ingredientes");
        }

        //Si la pila esta vacia y no se ha seleccionado ningun ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero la base de tu pizza");
        }

        /**
         * ****************************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************EL SIGUIENTE IF ES EL DE LOS TRES
         * INGREDIENTES************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * *************************************************************************************
         */
        //Si ya se seleccionaron dos ingredientes y se escoge el tercero
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && tercerIngrediente == false) {
            arregloSumaCombinacion.apilar(VALOR_MANZANA);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_MANZANA) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"manzana\"");
            try {
                if (consulta.next()) {
                    MANZANA = consulta.getFloat(1);
                    total = total + MANZANA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("manzana");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se seleccionó un ingrediente y se seleccionó una base
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && segundoIngrediente == false && tercerIngrediente == true) {
            arregloSumaCombinacion.apilar(VALOR_MANZANA);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_MANZANA) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"manzana\"");
            try {
                if (consulta.next()) {
                    MANZANA = consulta.getFloat(1);
                    total = total + MANZANA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("manzana");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se acaba de seleccionar un ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base != 0 && segundoIngrediente) {
            arregloSumaCombinacion.apilar(VALOR_MANZANA);
            sumaCombinacion = sumaCombinacion + base + VALOR_MANZANA;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
            segundoIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"manzana\"");
            try {
                if (consulta.next()) {
                    MANZANA = consulta.getFloat(1);
                    total = total + MANZANA;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("manzana");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }


    }//GEN-LAST:event_lblManzanaMouseClicked

    private void lblDuraznoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDuraznoMouseClicked
        // TODO add your handling code here:

        if (arregloSumaCombinacion.esLlena() == true) {
            JOptionPane.showMessageDialog(rootPane, "Solo puedes seleccionar 3 ingredientes");
        }

        //Si la pila esta vacia y no se ha seleccionado ningun ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base == 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero la base de tu pizza");
        }

        /**
         * ****************************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************EL SIGUIENTE IF ES EL DE LOS TRES
         * INGREDIENTES************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * ***********************************************************************************
         * *************************************************************************************
         */
        //Si ya se seleccionaron dos ingredientes y se escoge el tercero
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && tercerIngrediente == false) {
            arregloSumaCombinacion.apilar(VALOR_DURAZNO);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_DURAZNO) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"durazno\"");
            try {
                if (consulta.next()) {
                    DURAZNO = consulta.getFloat(1);
                    total = total + DURAZNO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("durazno");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se seleccionó un ingrediente y se seleccionó una base
        if (arregloSumaCombinacion.esVacia() == false && base != 0 && segundoIngrediente == false && tercerIngrediente == true) {
            arregloSumaCombinacion.apilar(VALOR_DURAZNO);
            sumaCombinacion = ((sumaCombinacion - base) * VALOR_DURAZNO) + base;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"durazno\"");
            try {
                if (consulta.next()) {
                    DURAZNO = consulta.getFloat(1);
                    total = total + DURAZNO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("durazno");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }

        //Si ya se acaba de seleccionar un ingrediente
        if (arregloSumaCombinacion.esVacia() == true && base != 0 && segundoIngrediente) {
            arregloSumaCombinacion.apilar(VALOR_DURAZNO);
            sumaCombinacion = sumaCombinacion + base + VALOR_DURAZNO;

            String path = "/Imagenes/combinaciones/" + sumaCombinacion + ".png";
            System.out.println(path);
            EscalarImagen combinacion = new EscalarImagen(path, lblCreacion);
            segundoIngrediente = false;

            consulta = conexion.ejecutarSQLSelect("SELECT precio from ingredientes WHERE nombre = \"durazno\"");
            try {
                if (consulta.next()) {
                    DURAZNO = consulta.getFloat(1);
                    total = total + DURAZNO;
                    lblTotal.setText("" + total);

                    arregloNombreIngredientes.apilar("durazno");
                }

            } catch (SQLException e) {

                System.out.println(e);
            }
        }


    }//GEN-LAST:event_lblDuraznoMouseClicked

    /**
     * El siguiente metodo implica el cambio de la cantidad de pizzas que el
     * usuario desea
     *
     * @param evt
     */
    private void cmbCantidadPizzasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCantidadPizzasItemStateChanged
        // TODO add your handling code here:
        if (total != 0) {
            totalMultiplicado = Float.parseFloat(lblTotal.getText());

            totalMultiplicado = total * Integer.parseInt(cmbCantidadPizzas.getSelectedItem().toString());

            lblTotal.setText("" + totalMultiplicado);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecciona primero tu pizza");

        }

    }//GEN-LAST:event_cmbCantidadPizzasItemStateChanged

    private void btnOtraFrutiPizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtraFrutiPizzaActionPerformed
        // TODO add your handling code here:}

        tamaño = tamañoPizza();
        if (cmbCantidadPizzas.getSelectedIndex() == 0) {
            totalMultiplicado = total * Integer.parseInt(cmbCantidadPizzas.getSelectedItem().toString());
        }

        /*String sql = "INSERT INTO `frutipizza`.`compra` (`nombre_cliente`, `numero_pizzas`, `total`,`fecha_compra`) "
         + "VALUES (`" + nombreCliente + "`, " + cmbCantidadPizzas.getSelectedItem().toString() 
         + ", " + lblTotal.getText() + ", CURRENT_DATE() );";*/
        try {
            comandosSQL = "INSERT INTO detalle_compra VALUES (NULL, " + idCompra + ", \""
                    + Base + arregloNombreIngredientes.mostrarIngredientes() + "\", "
                    + cmbCantidadPizzas.getSelectedItem().toString() + ", \" " + tamaño + " \", " + totalMultiplicado + " )";
            if (conexion.ejecutarSQL(comandosSQL)) {
                JOptionPane.showMessageDialog(rootPane, "¡Pizza agregada!");
                sumaCombinacion = 0;
                ingredentes = 0;
                base = 0;

                cmbCantidadPizzas.setSelectedIndex(0);
                borrarDatos();
            } else {
                JOptionPane.showMessageDialog(rootPane, "ERROR AL AGREGAR DETALLE_COMPRA");
                System.out.println(comandosSQL);
            }
        } catch (Exception e) {
        } finally {

        }
    }//GEN-LAST:event_btnOtraFrutiPizzaActionPerformed

    private void btnTerminarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerminarPedidoActionPerformed
        // TODO add your handling code here:

        tamaño = tamañoPizza();

        if (cmbCantidadPizzas.getSelectedIndex() == 0) {
            totalMultiplicado = total * Integer.parseInt(cmbCantidadPizzas.getSelectedItem().toString());
        }

        comandosSQL = "INSERT INTO detalle_compra VALUES (NULL, " + idCompra + ", \""
                + Base + arregloNombreIngredientes.mostrarIngredientes() + "\", "
                + cmbCantidadPizzas.getSelectedItem().toString() + ", \" " + tamaño + " \", " + totalMultiplicado + " )";

        if (conexion.ejecutarSQL(comandosSQL)) {
            JOptionPane.showMessageDialog(rootPane, "¡Un paso mas y terminas tu pedido!");

            /*sumaCombinacion = 0;
             ingredentes = 0;
             base = 0;*/
            TerminarPedido terminaPedido = new TerminarPedido();
            TerminarPedido.txtIdCompra.setText(idCompra + "");
            TerminarPedido.txtNombre.setText(nombreCliente);
            TerminarPedido.txtApellidoP.setText(apellidoPaternoCliente);
            TerminarPedido.txtAplellidoM.setText(apellidoMaternoCliente);
            TerminarPedido.bandera = bandera;
            int valor = pgrProgreso.getValue();
            String valor2 = valor + "";
            TerminarPedido.txtTiempo.setText(valor2);
            terminaPedido.setVisible(true);
            temp.stop();

            this.dispose();

            //borrarDatos();
        } else {
            JOptionPane.showMessageDialog(rootPane, "ERROR AL AGREGAR DETALLE_COMPRA");
            System.out.println(comandosSQL);
        }


    }//GEN-LAST:event_btnTerminarPedidoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:     

        nombreCliente = txtNombreCliente.getText();
        apellidoPaternoCliente = txtApellidoP.getText();
        apellidoMaternoCliente = txtApellidoM.getText();
        idCompra = txtIdCompra.getText();
        tiempo = txtTiempo.getText();

        if (idCompra.equals("") == true) {

            /**
             * Se crea la conexion a la base de datos
             */
            if (idCompra.equals("")) {

                if (conexion.crearConexion()) {
                    nombreCliente = JOptionPane.showInputDialog(rootPane, "Escribe tu nombre", "¿Quíen está ordenando?", 1);
                    
                    if(nombreCliente == null){
                        Inicio inicio = new Inicio();
                        inicio.setVisible(true);
                        this.dispose();
                    }
                    txtNombreCliente.setText(nombreCliente);
                    while (nombreCliente.equals("")) {
                        JOptionPane.showMessageDialog(rootPane, "Debes de escribir tu nombre para el pedido");
                        nombreCliente = JOptionPane.showInputDialog(rootPane, "Escribe tu nombre", "¿Quíen está ordenando?", 1);
                    }

                    apellidoPaternoCliente = JOptionPane.showInputDialog(rootPane, "Escribe tu apellido Paterno", "¿Quíen está ordenando?", 1);
                    txtApellidoP.setText(apellidoPaternoCliente);
                    /*while (apellidoPaternoCliente.equals("")) {
                     JOptionPane.showMessageDialog(rootPane, "Debes de escribir tu apellido paterno para el pedido");
                     apellidoPaternoCliente = JOptionPane.showInputDialog(rootPane, "Escribe tu apellido paterno", "¿Quíen está ordenando?", 1);
                     }*/

                    apellidoMaternoCliente = JOptionPane.showInputDialog(rootPane, "Escribe tu apellido materno", "¿Quíen está ordenando?", 1);
                    txtApellidoM.setText(apellidoMaternoCliente);

                    comandosSQL = "INSERT INTO compra VALUES (NULL, \"" + nombreCliente + "\", \""
                            + apellidoPaternoCliente + "\", \"" + apellidoMaternoCliente + "\", now());";

                    if (conexion.ejecutarSQL(comandosSQL) == false) {
                        JOptionPane.showMessageDialog(rootPane, "Error al conectar a la Base de datos");

                        System.out.println(comandosSQL);

                        this.dispose();
                        Inicio inicio = new Inicio();
                        inicio.setVisible(true);
                    } else {
                        comandosSQL = "SELECT last_insert_id()";
                        consulta = conexion.ejecutarSQLSelect(comandosSQL);

                        try {
                            if (consulta.next()) {
                                idCompra = consulta.getString(1);
                            }
                        } catch (SQLException e) {
                            this.dispose();
                            Inicio inicio = new Inicio();
                            inicio.setVisible(true);
                        } catch (Exception e) {

                        } finally {
                            try {
                                consulta.close();
                            } catch (SQLException ex) {

                            }
                        }
                    }

                    lblNombreCliente.setText(nombreCliente + " " + apellidoPaternoCliente + " " + apellidoMaternoCliente);

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error al conectar a la Base de datos");

                }

            } else {
                lblNombreCliente.setText(nombreCliente + " " + apellidoPaternoCliente + " " + apellidoMaternoCliente);
                if (!conexion.crearConexion()) {
                    JOptionPane.showMessageDialog(rootPane, "Error al conectar a la base de datos, comienza de nuevo");
                    Inicio inicio = new Inicio();
                    inicio.setVisible(true);
                    this.dispose();
                }

            }

            temporizador(180, this);
            temp.start();
        } else {
            if (!conexion.crearConexion() == true) {
                JOptionPane.showMessageDialog(rootPane, "Error al conectar a la base de datos, comienza de nuevo");
                Inicio inicio = new Inicio();
                inicio.setVisible(true);
                this.dispose();
            } else {

                temporizador(seg, this);
                temp.start();
            }
        }

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
       MensajeSalida mensajeSalida = new MensajeSalida();
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Creacion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Creacion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Creacion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Creacion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Creacion().setVisible(true);
            }
        });
    }

    private void borrarDatos() {
        sumaCombinacion = 0;
        ingredentes = 0;
        base = 0;
        tamaño = "";
        Base = "";
        total = 0;
        totalMultiplicado = 0;

        segundoIngrediente = true;
        tercerIngrediente = true;
        arregloSumaCombinacion.desapilar();
        arregloSumaCombinacion.desapilar();
        arregloSumaCombinacion.desapilar();

        arregloNombreIngredientes.desapilar();
        arregloNombreIngredientes.desapilar();
        arregloNombreIngredientes.desapilar();

        lblCreacion.setIcon(null);
        lblTotal.setText("0");
        //cmbCantidadPizzas.setSelectedIndex(0);
    }

    private String tamañoPizza() {
        String tamañoPizza = "";
        if (rdBtnIndividual.isSelected()) {
            tamañoPizza = "individual";
        } else {
            if (rdBtnChica.isSelected()) {
                tamañoPizza = "chica";
            } else {
                if (rdBtnMediana.isSelected()) {
                    tamañoPizza = "mediana";
                } else {
                    tamañoPizza = "grande";
                }
            }
        }
        return tamañoPizza;
    }

    void temporizador(int segundos, JFrame frame) {
        seg = segundos;
        ventana = frame;
        temp = new Timer(1000, new ActionListener() {
            float segundo;
            int minutos;

            @Override
            public void actionPerformed(ActionEvent e) {

                pgrProgreso.setValue(seg);
                minutos = seg / 60;
                segundo = (seg % 60);
                String cadena = segundo + "";
                char arreglo[] = cadena.toCharArray();
                if (arreglo.length == 3) {
                    lblTemporizador.setText(minutos + ":" + "0" + arreglo[0]);
                }
                if (arreglo.length == 4) {
                    lblTemporizador.setText(minutos + ":" + arreglo[0] + arreglo[1]);
                }

                if (seg == 0 && bandera == false) {
                    JOptionPane.showMessageDialog(rootPane, "Debes de terminar tu furipedido");
                    seg = 31;
                    bandera = true;
                    pgrProgreso.setValue(seg);
                }
                if (seg == 0 && bandera == true) {
                    JOptionPane.showMessageDialog(rootPane, "Se te ha acabado tu tiempo");
                    Inicio inicio = new Inicio();
                    inicio.setVisible(true);

                    ventana.dispose();

                }
                seg--;
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnOtraFrutiPizza;
    private javax.swing.JButton btnTerminarPedido;
    private javax.swing.JComboBox cmbCantidadPizzas;
    private javax.swing.ButtonGroup grupoTamañosPizzas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblCreacion;
    private javax.swing.JLabel lblDurazno;
    private javax.swing.JLabel lblFresa;
    private javax.swing.JLabel lblGalleta;
    private javax.swing.JLabel lblHarina;
    private javax.swing.JLabel lblKiwi;
    private javax.swing.JLabel lblMango;
    private javax.swing.JLabel lblManzana;
    private javax.swing.JLabel lblNombreCliente;
    private javax.swing.JLabel lblPiña;
    private javax.swing.JLabel lblPlatano;
    private javax.swing.JLabel lblTemporizador;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JProgressBar pgrProgreso;
    private javax.swing.JRadioButton rdBtnChica;
    private javax.swing.JRadioButton rdBtnGrande;
    private javax.swing.JRadioButton rdBtnIndividual;
    private javax.swing.JRadioButton rdBtnMediana;
    public static javax.swing.JTextField txtApellidoM;
    public static javax.swing.JTextField txtApellidoP;
    public static javax.swing.JTextField txtIdCompra;
    public static javax.swing.JTextField txtNombreCliente;
    public static javax.swing.JTextField txtTiempo;
    // End of variables declaration//GEN-END:variables
}
